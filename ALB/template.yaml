AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Fargate based ECS Task Definition to deploy applications in a single container

Parameters:
  StackName:
    Type: String
    Description: Name for ALB Stack

  VPCID:
    Type: String
    Description: VPC ID in which ALB will be connected to
    Default: ""

  Subnets:
    Type: String
    Description: Comma separated subnet IDs

  RequestTimeOut:
    Type: Number
    Description: Timeout of the ALB requests
    Default: 60

Conditions:
  IsVPCProvided:  !Not [!Equals ["", !Ref VPCID]]

Resources:
  ALBWebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow users to connect to the ALB
      GroupName: !Sub ${StackName}-ALB-SG
      VpcId: !If
        - IsVPCProvided
        - !Ref VPCID
        - !Ref AWS::NoValue
      SecurityGroupIngress:
        # FOR Spring HTTP Requests
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # FOR ExpressJS HTTP Requests
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        # FOR Flask HTTP Requests
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${StackName}-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBWebSG
      Subnets: !Split [ ",", !Ref Subnets]
      Type: application
      LoadBalancerAttributes:
        - Key: routing.http.preserve_host_header.enabled
          Value: true
        - Key: routing.http.xff_client_port.enabled
          Value: true
        - Key: routing.http.xff_header_processing.mode
          Value: append
        - Key: idle_timeout.timeout_seconds
          Value: !Ref RequestTimeOut

  Port80Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: application/json
            MessageBody: "{\"HTTPCode\": 503, \"Message\":\"Service Unavailable\"}"
            StatusCode: 503

  Port3000Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 3000
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: application/json
            MessageBody: "{\"HTTPCode\": 503, \"Message\":\"Service Unavailable\"}"
            StatusCode: 503

  Port5000Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 5000
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: application/json
            MessageBody: "{\"HTTPCode\": 503, \"Message\":\"Service Unavailable\"}"
            StatusCode: 503

Outputs:
  Port80ListenerARN:
    Description: ARN of port 80
    Value: !Ref Port80Listener
    Export:
      Name: !Sub ${StackName}-ALB-Listener-Port80

  Port3000ListenerARN:
    Description: ARN of port 3000
    Value: !Ref Port3000Listener
    Export:
      Name: !Sub ${StackName}-ALB-Listener-Port3000

  Port5000ListenerARN:
    Description: ARN of port 3000
    Value: !Ref Port5000Listener
    Export:
      Name: !Sub ${StackName}-ALB-Listener-Port5000

  ALBSGARN:
    Description: ARN of ALB Security Group
    Value: !Ref ALBWebSG
    Export:
      Name: !Sub ${StackName}-ALB-SG