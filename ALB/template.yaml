AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Application Load Balancer to handle multiple application requests

Parameters:
  StackName:
    Type: String
    Description: Name for ALB Stack

  VPCID:
    Type: String
    Description: VPC ID in which ALB will be connected to
    Default: ""

  Subnets:
    Type: String
    Description: Comma separated subnet IDs

  VPCEndpointSG:
    Type: String
    Description: VPC Endpoint SG
    Default: ""

  RequestTimeOut:
    Type: Number
    Description: Timeout of the ALB requests
    Default: 60

  ALBType:
    Type: String
    Description: Type of ALB
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal

  SSLCertificateARN:
    Type: String
    Description: ARN of SSL certificate
    Default: ""

  DomainName:
    Type: String
    Description: Name of the Domain

  HostedZoneId:
    Type: String
    Description: Hosted Zone ID

Conditions:
  IsVPCProvided:  !Not [!Equals ["", !Ref VPCID]]
  IsPublic: !Equals ["internet-facing", !Ref ALBType]
  IsPrivate: !Not [Condition: IsPublic]
  HasVPCEndpointSG: !Not [!Equals ["", !Ref VPCEndpointSG]]

Resources:
  ALBWebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow users to connect to the ALB
      GroupName: !Sub ${StackName}-ALB-SG
      VpcId: !If
        - IsVPCProvided
        - !Ref VPCID
        - !Ref AWS::NoValue
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - !If
          - IsPublic
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - IsPrivate
          - IpProtocol: tcp
            FromPort: 3000
            ToPort: 3000
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        - !If
          - IsPrivate
          - IpProtocol: tcp
            FromPort: 5000
            ToPort: 5000
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue

      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${StackName}-ALB
      Scheme: !Ref ALBType
      SecurityGroups:
        - !Ref ALBWebSG
        - !If
          - HasVPCEndpointSG
          - !Ref VPCEndpointSG
          - !Ref AWS::NoValue
      Subnets: !Split [ ",", !Ref Subnets]
      Type: application
      LoadBalancerAttributes:
        - Key: routing.http.preserve_host_header.enabled
          Value: true
        - Key: routing.http.xff_client_port.enabled
          Value: true
        - Key: routing.http.xff_header_processing.mode
          Value: append
        - Key: idle_timeout.timeout_seconds
          Value: !Ref RequestTimeOut

  Port443Listener:
    Condition: IsPublic
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: !Ref SSLCertificateARN
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: application/json
            MessageBody: "{\"HTTPCode\": 503, \"Message\":\"Service Unavailable\"}"
            StatusCode: 503

  Port80Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - !If
          - IsPublic
          - Type: redirect
            RedirectConfig:
              Host: '#{host}'
              Path: '/#{path}'
              Port: '443'
              Query: '#{query}'
              Protocol: HTTPS
              StatusCode: HTTP_301
          - Type: fixed-response
            FixedResponseConfig:
              ContentType: application/json
              MessageBody: "{\"HTTPCode\": 503, \"Message\":\"Service Unavailable\"}"
              StatusCode: 503

  Port3000Listener:
    Condition: IsPrivate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 3000
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: application/json
            MessageBody: "{\"HTTPCode\": 503, \"Message\":\"Service Unavailable\"}"
            StatusCode: 503

  Port5000Listener:
    Condition: IsPrivate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 5000
      Protocol: "HTTP"
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: application/json
            MessageBody: "{\"HTTPCode\": 503, \"Message\":\"Service Unavailable\"}"
            StatusCode: 503

  DNSRouteRecord:
    Type: AWS::Route53::RecordSetGroup
    Condition: IsPublic
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: Zone apex alias targeted to ALB LoadBalancer.
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
            EvaluateTargetHealth: True
            DNSName: !GetAtt ApplicationLoadBalancer.DNSName


Outputs:
  Port443ListenerARN:
    Condition: IsPublic
    Description: ARN of port 443
    Value: !Ref Port443Listener
    Export:
      Name: !Sub ${StackName}-ALB-Listener-Port443

  Port80ListenerARN:
    Condition: IsPrivate
    Description: ARN of port 80
    Value: !Ref Port80Listener
    Export:
      Name: !Sub ${StackName}-ALB-Listener-Port80

  Port3000ListenerARN:
    Condition: IsPrivate
    Description: ARN of port 3000
    Value: !Ref Port3000Listener
    Export:
      Name: !Sub ${StackName}-ALB-Listener-Port3000

  Port5000ListenerARN:
    Condition: IsPrivate
    Description: ARN of port 5000
    Value: !Ref Port5000Listener
    Export:
      Name: !Sub ${StackName}-ALB-Listener-Port5000

  ALBSGARN:
    Description: ARN of ALB Security Group
    Value: !Ref ALBWebSG
    Export:
      Name: !Sub ${StackName}-ALB-SG